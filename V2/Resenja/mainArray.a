x_data .xdata_ovly align 128

X_BX_Buffer1 .bsc(128), (0)	# buf u x memoriji

y_data .ydata_ovly align 128 # poravnat na adresu koja je deljiva sa 128

X_BY_Buffer2 .bsc(128), (0)	# buff u y memoriji

main .code_ovly at 0x0000
	
	# for(int i = 0; i < 128; i++)
	#{
	#	X_BX_Buffer1[i]= i;
	#}
	
	halfword(a0l) = (0)
	halfword(a1l) = (1) 
	i0 = (X_BX_Buffer1)
	
	do(128), >loop
		xmem[i0] = a0l; i0 += 1	# upisujemo na adresu i0 brojac a01
%loop:	a0 = a0 + a1			# povecavamo vrednost i

	i0 = (X_BX_Buffer1)			# resetovanje vrednosti
	i1 = (X_BY_Buffer2)
	halfword(a0l) = (0)			# i = 0
	halfword(a1l) = (0) 		# ++1
	nm0 = (0x6003)				# nm1 -> i1 0x6 = 128, 0x003 povecava za 3
	
	do(128), >loop
		x0 = xmem[i0]; i0 += n	# uzima svaki 3*i element po modulu 128
%loop:	ymem[i1] = x0; i1 += 1	# y[i] = x[3*i%128] 	
	
	call X_S_mean				# poziv funkcije
	
	ret

func .code_ovly

X_S_mean:
	i0 = (X_BX_Buffer1)			# resetovanje vrednosti
	i1 = (X_BY_Buffer2)
	mr = (0x1)					# SRS deli sa 2 rezultat iz akumulatora
	
	do(128), >loop
		a0 = xmem[i0]			# a[i]
		b0 = ymem[i1]; i1 += 1	# b[i]
		a0 = a0 + b0			# a[i] = a[i] + b[i]
%loop:	xmem[i0] = a0; i0 += 1			

	ret
 
	
